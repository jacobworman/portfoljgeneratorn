{"version":3,"sources":["components/Cards/Cards.js","components/Cards/CardPresentation.js","App.js","serviceWorker.js","index.js"],"names":["Cards","props","animationHandler","myTween","TweenLite","to","myElement","rotation","setTimeout","x","play","className","ref","div","onClick","click","alt","src","this","title","info","class","Component","CardPresentation","productFee","toFixed","risk","name","description","App","state","page","companies","allocation","spara","httpHandler","console","log","axios","post","then","response","setState","data","company","pageHandler","html","id","options","series","labels","type","width","map","el","key","_id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4db9d26a.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Cards.css';\r\nimport {TweenLite} from \"gsap/TweenMax\";\r\n\r\nclass Cards extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        // reference to the DOM node\r\n        this.myElement = null;\r\n        // reference to the animation\r\n        this.myTween = null;\r\n      }\r\n\r\n\r\n      animationHandler = () => {\r\n          this.myTween = TweenLite.to(this.myElement, 0.5, {rotation:360});\r\n          setTimeout(() => {\r\n            this.myTween = TweenLite.to(this.myElement, 0.1, {x: 0}).play();\r\n          }, 100)\r\n      }\r\n    \r\n\r\n    render(){\r\n        return(\r\n            <div className=\"cards-list\">\r\n                \r\n                <div ref={div => this.myElement = div} onClick={() => {\r\n                    this.animationHandler();\r\n                    setTimeout(() =>{\r\n                        this.props.click(this.props.alt)\r\n                    }, 500)\r\n                }}>\r\n                <div className=\"card 1\">\r\n                <div className=\"card_image\"> <img src=\"https://i.redd.it/b3esnz5ra34y.jpg\" alt=\"\"/> </div>\r\n                <div className=\"card_title title-white\">\r\n                    <p>{this.props.title}</p>\r\n                </div>\r\n                </div>\r\n                </div>\r\n                {this.props.info ? <div class=\"text\"><p>{this.props.info}</p></div> : null}  \r\n            </div> \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Cards;","import React, {Component} from 'react';\r\nimport './CardPresentation.css';\r\n\r\nclass CardPresentation extends Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n         /*   <div className=\"center\">\r\n\r\n  <div className=\"card1\">\r\n    <div className=\"additional\">\r\n      <div className=\"user-card1\">\r\n        <div className=\"level center\">\r\n          Avgift: {this.props.productFee.toFixed(2)} %\r\n        </div>\r\n        <div className=\"points center\">\r\n          Risk: {this.props.risk}\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div className=\"general\">\r\n      <h1>{this.props.name}</h1>\r\n      <p>{this.props.description}</p>\r\n    </div>\r\n  </div>\r\n</div>\r\n*/\r\n\r\n<div className=\"wrapper\">\r\n<div className=\"profile-card js-profile-card\">\r\n\r\n  <div>\r\n    <div>\r\n        <p>Avgift: <strong>{this.props.productFee.toFixed(2)} %</strong></p>\r\n        <p>Risk: <strong>{this.props.risk} </strong> </p>\r\n    </div>\r\n    <div>\r\n      <span>\r\n      <h1>{this.props.name}</h1>\r\n      <p>{this.props.description}</p>\r\n      </span>\r\n    </div>\r\n  </div>\r\n</div>\r\n</div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default CardPresentation;","import React, {Component} from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Chart from \"react-apexcharts\";\n\nimport Cards from './components/Cards/Cards';\nimport CardPresentation from './components/Cards/CardPresentation';\n\nclass App extends Component{\n  state = {\n    page: 1,\n    alt: '',\n    companies : null,\n    allocation: null,\n    spara : 1\n  }\n\n  httpHandler = () => {\n    console.log(typeof this.state.alt)\n    axios.post('/portfolio/get', \n    {alt: this.state.alt}\n    ).then((response) => {\n      this.setState({\n        companies: response.data.company,\n        allocation: response.data.allocation,\n        page: this.state.page + 1\n      });\n    });\n  }\n\n  pageHandler = (alt, spara) => {\n    if(alt === 'go'){\n      this.setState({\n        page: this.state.page + 1\n      });\n    }else if(alt === \"back\"){\n      this.setState({\n        page: 1,\n        alt: ''\n      });\n    }else{\n      this.setState({\n        page: this.state.page + 1,\n        alt: this.state.alt + alt,\n        spara : (spara ? spara : this.state.spara)\n      });\n    }\n  };\n\n  render(){\n\n    let html = null;\n\n    if(this.state.page === 1){\n      html = (\n        <div>\n  <h3 id=\"title\">\n  Välkommen till portföljgeneratorn\n</h3>\n\n<div class=\"container\">\n              <ul class=\"progressbar\">\n                  <li class=\"active\">Info</li>\n                  <li>Sparhorisont</li>\n                  <li>Optimering</li>\n                  <li>Förslag</li>\n               </ul>\n          </div>\n<p id=\"lorem-ipsum\">\n  Portföljgeneratorn analyserar 550 fonder åt dig och som ger dig förslag till en portfölj med bara fonder i. \n  Förslaget ska hjälpa dig att ta ett bättre beslut i köpandet av fonder. Den metod vi har valt att analysera fonderna på är\n  med modern portfölj teori (den effektiva fronten) och ett performance index (Ulcer Index). Med dessa två verktyg och några andra,\n  finns nu portföljgeneratorn till för alla som behöver råd och hjälp till att välja fonder och skapa en bättre portfölj!\n</p>\n<button onClick={() => {this.pageHandler('go')}} >Portföljen</button>\n        </div>\n      );\n    }else if(this.state.page === 2){\n      html = (\n        <div>\n          <button onClick={() => {this.pageHandler('back')}} class=\"black\">Gå tillbaka</button>\n          <h1>Hur länge vill du spara?</h1>\n          <div class=\"container\">\n              <ul class=\"progressbar\">\n                  <li class=\"active\">Info</li>\n                  <li class=\"active\">Sparhorisont</li>\n                  <li>Optimering</li>\n                  <li>Förslag</li>\n               </ul>\n          </div>\n        <Cards title=\"No stress\" click={() => {this.pageHandler(\"1\", 2)}} info=\"Passar bra till sparande på minst 2 år. Vi har analyserat 550 fonder med ett performance index (Ulcer Index) som filtrerar bort fonder med hög risk. No stress innebär alltså att du kan sova tryggt när fonderna väl faller.\"  />\n        <Cards title=\"Avkastning\" click={() => {this.pageHandler(\"2\", 3)}} info=\"Passar bra till sparande på minst 3 år. Filtrerar på historisk avkastning på fonder.\"  />\n        <Cards title=\"Låg risk\" click={() => {this.pageHandler(\"3\", 1)}} info=\"Passar bra till sparande av lägre än 1 år. Filtrerar på historisk standardavvikelse.\"  />\n      </div>\n      );\n    \n  }else if(this.state.page === 3){\n      html = (\n        <div>\n          <button onClick={() => {this.pageHandler('back')}} class=\"black\">Gå tillbaka</button>\n          <h1>Optimera</h1>\n          <div class=\"container\">\n              <ul class=\"progressbar\">\n                  <li class=\"active\">Info</li>\n                  <li class=\"active\">Sparhorisont</li>\n                  <li class=\"active\">Optimering</li>\n                  <li>Förslag</li>\n               </ul>\n          </div>\n          <p id=\"lorem-ipsum\">Vi har med hjälp av modern portfölje teori tagit fram två förslag till optimering. Minsta risk innebär att portföljen optimeras för att nå en sådan låg risk som möjligt. En effektiv portfölj optimeras till en portfölj med högre risk men eventuellt högre avkastning.</p>\n          <Cards title=\"Minsta risk\" click={this.pageHandler} alt=\"r\" />\n          <Cards title=\"Mest effektiv\" click={this.pageHandler} alt=\"e\" />\n        </div>\n      );\n    }else if(this.state.page === 4){\n      this.httpHandler();\n    }else if(this.state.page === 5){\n      const options = {\n        series: this.state.allocation.allocation,\n        labels: this.state.allocation.company,\n      }\n      html = (\n        <div className=\"donut\">\n          <button onClick={() => {this.pageHandler('back')}} class=\"black\">Gå tillbaka</button>\n          <h1>Din portfölj</h1>\n          <p>Den här portföljen är tagen från modern portfölje teori och som har filtrerats baserat på dina val i förgående steg.</p>\n          <div className=\"divDonut\">\n            <h3>Enligt vår kalkyl ska du allokera dina tillgångar så här:</h3>\n            <Chart\n                  options={options} \n                  series={options.series}\n                  labels={options.labels}\n                  type=\"donut\" \n                  width=\"100%\"\n              />\n          </div>\n          <h3>Vi rekommenderar att du sparar i minst {this.state.spara} år</h3>\n          <h3>Här nedanför kan du läsa mer om de fonder vi har tagit fram åt dig:</h3>\n            {this.state.companies.map(el => {\n              return (<CardPresentation \n                key={el._id}\n                productFee={el.productFee}\n                risk={el.risk}\n                name={el.name}\n                description={el.description}\n              />);\n            })}\n          </div>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        {html}\n      </div>\n    );\n  };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}